name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================================================
  # Lint and Security Scan
  # ===========================================================================
  lint:
    name: Lint and Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: game-server/package-lock.json

      - name: Install dependencies
        working-directory: ./game-server
        run: npm ci

      - name: Run linter
        working-directory: ./game-server
        run: npm run lint

      - name: Security audit
        working-directory: ./game-server
        run: npm audit --audit-level=moderate || true

  # ===========================================================================
  # Unit and Integration Tests
  # ===========================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: game-server/package-lock.json

      - name: Install dependencies
        working-directory: ./game-server
        run: npm ci

      - name: Run unit tests
        working-directory: ./game-server
        run: npm run test:unit || echo "No unit tests yet"
        env:
          NODE_ENV: test

      - name: Run integration tests
        working-directory: ./game-server
        run: npm run test:integration || echo "No integration tests yet"
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./game-server/coverage
          fail_ci_if_error: false

  # ===========================================================================
  # Build Docker Image
  # ===========================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./game-server
          file: ./game-server/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'

  # ===========================================================================
  # Load Testing (on main branch only)
  # ===========================================================================
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: game-server/package-lock.json

      - name: Install dependencies
        working-directory: ./game-server
        run: npm ci

      - name: Start server in background
        working-directory: ./game-server
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 8081

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8081/healthz; do sleep 1; done'

      - name: Run load tests
        working-directory: ./game-server
        run: npm run test:load || echo "Load tests not configured"
        continue-on-error: true

      - name: Stop server
        if: always()
        run: pkill -f "node.*server.js" || true

  # ===========================================================================
  # Deploy (if needed in the future)
  # ===========================================================================
  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [build, load-test]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #
  #   steps:
  #     - name: Deploy to production
  #       run: echo "Deploy steps here"
